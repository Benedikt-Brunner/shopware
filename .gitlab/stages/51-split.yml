# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json

.split-base:
  stage: split
  tags:
    - shopware-amd64
  image:
    name: gitlab.shopware.com:5005/infrastructure/docker-base/ci
  variables:
    SPLITSH_ARCHIVE_URL: 'https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz'
    GIT_DEPTH: '0'
    GIT_STRATEGY: 'clone'
    KUBERNETES_SERVICE_CPU_REQUEST: "2"
    KUBERNETES_SERVICE_CPU_LIMIT: "16"
    KUBERNETES_SERVICE_MEMORY_REQUEST: "2Gi"
    KUBERNETES_SERVICE_MEMORY_LIMIT: "16Gi"
  needs: [ ]
  before_script: [ ]
  services: [ ]
  artifacts:
    when: on_success
    paths:
      - '${CI_PROJECT_DIR}/repos'

.finalize:
  extends: .split-base
  variables:
    GIT_AUTHOR_EMAIL: 'shopwarebot@shopware.com'
    GIT_AUTHOR_NAME: 'shopwareBot'
    GIT_COMMITTER_EMAIL: 'shopwarebot@shopware.com'
    GIT_COMMITTER_NAME: 'shopwareBot'
  needs:
    - job: 'add assets to split repositories'

split repository:
  extends: .split-base
  rules:
    - !reference [ .rules, split, rules-label-or-scheduled-or-tag ]
  image:
    name: alpine:3.19
  parallel:
    matrix:
      - PACKAGE: [ 'Administration', 'Storefront', 'Core', 'Elasticsearch' ]
  before_script:
    - apk add git git-subtree bash
  script:
    - .gitlab/bin/split.sh split_repo "${PACKAGE}"

add assets to split repositories:
  extends: .split-base
  needs:
    - job: 'Build'
    - job: 'split repository'
  rules:
    - !reference [ .rules, split, rules-label-or-scheduled-or-tag ]
  variables:
    GIT_AUTHOR_EMAIL: 'shopwarebot@shopware.com'
    GIT_AUTHOR_NAME: 'shopwareBot'
    GIT_COMMITTER_EMAIL: 'shopwarebot@shopware.com'
    GIT_COMMITTER_NAME: 'shopwareBot'
  script:
    - >
      for package in Administration Storefront; do
        .gitlab/bin/split.sh copy_assets "${package}"
      done
    - .gitlab/bin/split.sh check_assets
    - .gitlab/bin/split.sh include_admin_assets
    - .gitlab/bin/split.sh include_storefront_assets

finalize split repos (tag):
  extends: .finalize
  rules:
    - !reference [ .rules, split, rules-tag ]
  script:
    - >
      for package in Administration Storefront Elasticsearch; do
        .gitlab/bin/split.sh require_core_version "${package}" "${CI_COMMIT_TAG}"
      done
    - >
      for package in Administration Storefront Elasticsearch; do
        .gitlab/bin/split.sh commit "${package}" "${CI_COMMIT_TAG} (+ assets)"
      done
    - >
      for package in Administration Storefront Core Elasticsearch; do
        .gitlab/bin/split.sh tag "${package}" "${CI_COMMIT_TAG}"
      done

finalize split repos (protected branch):
  extends: .finalize
  rules:
    - !reference [ .rules, split, rules-scheduled ]
  script:
    - >
      for package in Administration Storefront Elasticsearch; do
        .gitlab/bin/split.sh require_core_version "${package}" "dev-${CI_COMMIT_REF_NAME}"
      done
    - >
      for package in Administration Storefront Elasticsearch; do
        .gitlab/bin/split.sh commit "${package}" "${CI_COMMIT_REF_NAME} (+ assets)"
      done

finalize split repos (merge request):
  extends: .finalize
  rules:
    - !reference [ .rules, split, rules-label ]
  script:
    - >
      for package in Administration Storefront Elasticsearch; do
          .gitlab/bin/split.sh require_core_version "${package}" "dev-tmp-${CI_COMMIT_SHORT_SHA}"
      done
    - >
      for package in Administration Storefront Elasticsearch; do
        .gitlab/bin/split.sh commit "${package}" "tmp-${CI_COMMIT_SHORT_SHA} (+ assets)"
      done
    - >
      for package in Administration Storefront Core Elasticsearch; do
        .gitlab/bin/split.sh branch "${package}" "tmp-${CI_COMMIT_SHORT_SHA}"
      done
